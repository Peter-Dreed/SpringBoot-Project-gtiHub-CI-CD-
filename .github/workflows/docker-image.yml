name: Self-Hosted CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_app:
    name: Build Spring Boot App
    runs-on: self-hosted

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        working-directory: SpringBoot-Project/spring-boot-demo
        run: mvn clean package -DskipTests

  dockerize:
    name: Build and Push Docker Image
    needs: build_app
    runs-on: self-hosted

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        working-directory: SpringBoot-Project/spring-boot-demo
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/springboot-demo .

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/springboot-demo

  deploy_to_ec2:
    name: Deploy to EC2 and Restart Spring Boot App
    needs: dockerize
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.HOST_ADDRESS }} >> ~/.ssh/known_hosts

      - name: SSH and Deploy Spring Boot Container
        run: |
          ssh ${{ secrets.HOST_USERNAME }}@${{ secrets.HOST_ADDRESS }} <<'EOF'

            echo "Stopping any running container..."
            docker stop springboot_container || true
            docker rm springboot_container || true

            echo "Pulling latest image..."
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/springboot-demo

            echo "Starting new container..."
            docker run -d \
              --name springboot_container \
              -p 8081:8081 \
              ${{ secrets.DOCKER_USERNAME }}/springboot-demo

            echo "Waiting for Spring Boot app to start..."
            sleep 10

            echo "Checking app status..."
            if curl -s --head http://localhost:8081 | grep "200 OK" > /dev/null; then
              echo "App is up"
            else
              echo "App failed to start or is not healthy"
              docker logs springboot_container
              exit 1
            fi

            echo "Restarting Nginx..."
            sudo systemctl restart nginx

          EOF
